import { html, css } from '../../lib/lit-element/lit-element.js';
import { unsafeHTML } from '../../lib/lit-html/directives/unsafe-html.js';
import { LiElement } from '../../li.js';
import './src/showdown.min.js';
import './src/decodeHTML.min.js';
import './src/highlight.min.js';
import './src/showdown-youtube.min.js';

let mdShowdown = {};

customElements.define('li-viewer-md', class LiViewerMD extends LiElement {
    static get properties() {
        return {
            src: {
                type: String,
                default: ''
            },
            optionsDefault: {
                type: Object,
                default: {
                    omitExtraWLInCodeBlocks: false, //'Omit the default extra whiteline added to code blocks',
                    noHeaderId: false, //'Turn on/off generated header id',
                    prefixHeaderId: false, //'Add a prefix to the generated header ids. Passing a string will prefix that string to the header id. Setting to true will add a generic \'section-\' prefix',
                    rawPrefixHeaderId: false, //'Setting this option to true will prevent showdown from modifying the prefix. This might result in malformed IDs (if, for instance, the " char is used in the prefix)',
                    ghCompatibleHeaderId: false, //'Generate header ids compatible with github style (spaces are replaced with dashes, a bunch of non alphanumeric chars are removed)',
                    rawHeaderId: false, //'Remove only spaces, \' and " from generated header ids (including prefixes), replacing them with dashes (-). WARNING: This might result in malformed ids',
                    headerLevelStart: false, //'The header blocks level start', type: 'integer'
                    parseImgDimensions: false, //'Turn on/off image dimension parsing',
                    simplifiedAutoLink: false, //'Turn on/off GFM autolink style',
                    literalMidWordUnderscores: false, //'Parse midword underscores as literal underscores',
                    literalMidWordAsterisks: false, //'Parse midword asterisks as literal asterisks',
                    strikethrough: false, //'Turn on/off strikethrough support',
                    tables: true, //'Turn on/off tables support',
                    tablesHeaderId: false, //'Add an id to table headers',
                    ghCodeBlocks: true, //'Turn on/off GFM fenced code blocks support',
                    tasklists: false, //'Turn on/off GFM tasklist support',
                    smoothLivePreview: false, //'Prevents weird effects in live previews due to incomplete input',
                    smartIndentationFix: false, //'Tries to smartly fix indentation in es6 strings',
                    disableForced4SpacesIndentedSublists: false, //'Disables the requirement of indenting nested sublists by 4 spaces',
                    simpleLineBreaks: false, //'Parses simple line breaks as <br> (GFM Style)',
                    requireSpaceBeforeHeadingText: false, //'Makes adding a space between `#` and the header text mandatory (GFM Style)',
                    ghMentions: false, //'Enables github @mentions',
                    ghMentionsLink: 'https://github.com/{u}', //'Changes the link generated by @mentions. Only applies if ghMentions option is enabled.',
                    encodeEmails: true, //'Encode e-mail addresses through the use of Character Entities, transforming ASCII e-mail addresses into its equivalent decimal entities',
                    openLinksInNewWindow: true,//'Open all links in new windows',
                    backslashEscapesHTMLTags: true, //'Support for HTML Tag escaping. ex: \<div>foo\</div>',
                    emoji: true, //'Enable emoji support. Ex: `this is a :smile: emoji`'
                    underline: false, //'Enable support for underline. Syntax is double or triple underscores: `__underline word__`. With this option enabled, underscores no longer parses into `<em>` and `<strong>`',
                    completeHTMLDocument: false, //Outputs a complete html document, including `<html>`, `<head>` and `<body>` tags',
                    metadata: false, //'Enable support for document metadata (defined at the top of the document between `«««` and `»»»` or between `---` and `---`).',
                    splitAdjacentBlockquotes: false, //'Split adjacent blockquote blocks',
                }
            },
            options: {
                type: Object,
                default: {}
            },
            html: {
                type: String,
                default: ''
            }
        }
    }

    set src(val) {
        let oldVal = this._src
        if (val !== oldVal) {
            this._src = val;
            this.requestUpdate('src', oldVal);
            this._setHTML(val);
        }
    }
    get src() { return this._src; }

    constructor() {
        super();
    // }
    // firstUpdated() {
    //     super.firstUpdated();
        mdShowdown = new showdown.Converter({
            ...this.optionsDefault, ...this.options,
            extensions: ['youtube', () => {
                return [{
                    type: "output",
                    filter(text) {
                        let left = "<pre><code\\b[^>]*>", right = "</code></pre>", flags = "g";
                        const replacement = (wholeMatch, match, left) => {
                            let lang = (left.match(/class=\"([^ \"]+)/) || [])[1];
                            let html = lang && hljs.getLanguage(lang) ? hljs.highlight(lang, htmlDecode(match)).value : hljs.highlightAuto(htmlDecode(match)).value;
                            return `
                                <pre class="hljs" style="display:flex;border: .5px solid lightgray;border-radius:2px;
                                    overflow:auto;overflow-x:auto;min-height:32px;background: #FFE5;">
                                    <code class="hljs" style="outline:0px solid transparent;font-size:125%;line-height: 1.2;">${html}</code>
                                </pre>`;
                        };
                        return showdown.helper.replaceRecursiveRegExp(text, replacement, left, right, flags);
                    }
                }];
            }]
        });
        this._setHTML();
    }

    async _setHTML(s = this.src) {
        let url = new URL(window.location),
            src = url.searchParams.get("src") || s;
        if (!src) return;
        if (src.endsWith('.md')) {
            src = await fetch(s);
            src = src && src.ok ? await src.text() : s;
        }
        src = src.replace(/(```\S*|~~~\S*)( +)/g, '$1' + '_');
        this.html = html`${unsafeHTML(mdShowdown.makeHtml(src))}`;
    }

    static get styles() {
        return css`
            :host { overflow-y: auto; padding: 2px; font-family: Roboto, Noto, sans-serif; color: #000F}
            table { border-collapse: collapse; width: 100%; margin-bottom: 16px; }
            th { @apply --header; border: 1px solid darkgray; padding: 2px; }
            td { border: 1px solid lightgray; padding: 2px; }
            img { max-width: 96%; height: auto; }
            .md { @apply --layout; display: block; padding: 4px; }
            .hljs { @apply --layout; display: block; padding: 8px 4px 6px 10px; }
            .hljs-comment, .hljs-quote { color: #93a1a1; }
            .hljs-keyword, .hljs-selector-tag, .hljs-addition { color: #859900; }
            .hljs-number, .hljs-string, hljs-meta .hljs-meta-string, .hljs-literal, .hljs-doctag, .hljs-regexp { color: #2aa198; }
            .hljs-title, .hljs-section, .hljs-name, .hljs-selector-id, .hljs-selector-class { color: #268bd2; }
            .hljs-attribute, .hljs-attr, .hljs-variable, .hljs-template-variable, .hljs-class .hljs-title, .hljs-type { color: #b58900; }
            .hljs-symbol, .hljs-bullet, .hljs-subst, .hljs-meta, .hljs-meta .hljs-keyword, .hljs-selector-attr, .hljs-selector-pseudo, .hljs-link { color: #cb4b16; }
            .hljs-built_in, .hljs-deletion { color: #dc322f; }
            .hljs-formula { background: #eee8d5; } 
            .hljs-emphasis { font-style: italic; } 
            .hljs-strong { font-weight: bold; }
            .hjln { min-width:34px; color:gray; border-right:.1em solid; counter-reset: l; cursor:default; float:left; padding:8px 0; margin:0 0.5em 0 0; text-align:right; -moz-user-select:none; -webkit-user-select:none }
            .hjln span { counter-increment:l; display:block;padding:0 .5em 0 1em }
            .hjln span:before { content:counter(l) }
            .light { background-color: #ddd; display: inline-block;}
            .icon-info { display: flex; }
        `;
    }
    render() { return html`${this.html}` }
})
